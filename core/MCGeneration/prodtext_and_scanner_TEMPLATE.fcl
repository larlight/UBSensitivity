#include "services_microboone.fcl"
#include "textfilegen.fcl"
#include "largeantmodules.fcl"
#include "detsimmodules.fcl"
#include "scanner_base.fcl"
# #include "mcshowerreco.fcl"


standard_mcshowerrecopart:
{
    DebugMode:   true
#    TimeCut:     500
#    Dist2Cut:    10 
#    EnableMerge: true
}

standard_mcshowerrecoedep:
{
    DebugMode:  false
    SaveMCHit:  true
}

standard_mcshowerrecoalg:
{
    DebugMode:  false
    G4ModName:        "largeant"
    MinShowerEnergy:  0
    MinNumDaughters:  1
    MCShowerRecoEdep: @local::standard_mcshowerrecoedep
    MCShowerRecoPart: @local::standard_mcshowerrecopart
}

standard_mcshowerfinder:
{
  module_type:     "MCShowerFinder"
  MCShowerRecoAlg: @local::standard_mcshowerrecoalg
}

process_name: TextGenAndScanner

my_scanner: @local::standard_datascanner

my_scanner.fModName_MCTruth:        "largeant:generator"
my_scanner.fModName_MCParticle:     "largeant"
my_scanner.fModName_MCShower:       "mcshower"
my_scanner.fModName_SimChannel:     ""
my_scanner.fModName_RawDigit:       ""
my_scanner.fModName_FIFOChannel:    ""
my_scanner.fModName_CalData:        ""
my_scanner.fModName_CrawlerHit:     ""
my_scanner.fModName_GausHit:        ""
my_scanner.fModName_APAHit:         ""
my_scanner.fModName_FFTHit:         ""
my_scanner.fModName_RFFHit:         ""
my_scanner.fModName_CrawlerCluster: ""
my_scanner.fModName_DBCluster:      ""
my_scanner.fModName_FuzzyCluster:   ""
my_scanner.fModName_HoughCluster:   ""
my_scanner.fModName_ShowerAngleCluster: ""
my_scanner.fModName_Bezier:         ""
my_scanner.fModName_SpacePoint:     ""
my_scanner.fModName_Kalman3DSPS:    ""
my_scanner.fModName_Kalman3DHit:    ""
my_scanner.fModName_FeatureVertex:  ""
my_scanner.fModName_HarrisVertex:   ""
my_scanner.fModName_FeatureEndPoint2D: ""
my_scanner.fModName_HarrisEndPoint2D: ""
my_scanner.fModName_Shower:         ""
my_scanner.fModName_Calorimetry:    ""

# Associations to look up
my_scanner.fAssType_MCTruth:        ""
my_scanner.fAssType_MCParticle:     ""
my_scanner.fAssType_SimChannel:     ""
my_scanner.fAssType_MCShower:       ""
my_scanner.fAssType_RawDigit:       ""
my_scanner.fAssType_FIFOChannel:    ""
my_scanner.fAssType_CalData:        ""
my_scanner.fAssType_CrawlerHit:     ""
my_scanner.fAssType_GausHit:        ""
my_scanner.fAssType_APAHit:         ""
my_scanner.fAssType_FFTHit:         ""
my_scanner.fAssType_RFFHit:         ""
my_scanner.fAssType_CrawlerCluster: ""
my_scanner.fAssType_DBCluster:      ""
my_scanner.fAssType_FuzzyCluster:   ""
my_scanner.fAssType_HoughCluster:   ""
my_scanner.fAssType_ShowerAngleCluster: ""
my_scanner.fAssType_Bezier:         ""
my_scanner.fAssType_SpacePoint:     ""
my_scanner.fAssType_Kalman3DSPS:    ""
my_scanner.fAssType_Kalman3DHit:    ""
my_scanner.fAssType_FeatureVertex:  ""
my_scanner.fAssType_HarrisVertex:   ""
my_scanner.fAssType_FeatureEndPoint2D: ""
my_scanner.fAssType_HarrisEndPoint2D: ""
my_scanner.fAssType_Shower:         ""
my_scanner.fAssType_Calorimetry:    ""


services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "XXXLARLIGHTOUTPUTXXX" }
  Timing:       {}
  RandomNumberGenerator: {} #ART native random number generator
  message:      @local::standard_warning
  user:         @local::microboone_simulation_services
}


#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  #NOTE: USING -1 OR ANY NUMBER > # of EVTS IN FILE WILL CAUSE SEGFAULT
  maxEvents:   100           # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   generator: @local::standard_textfilegen	  
   largeant:  @local::microboone_largeant	  
   mcshower:  @local::standard_mcshowerfinder
   rns:       { module_type: "RandomNumberSaver" }
 }

 analyzers:
 {
   scanner: @local::my_scanner     
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [ generator, largeant, mcshower, rns ] 

 analyzeIt: [ scanner ]

 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [simulate] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1, analyzeIt]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "XXXLARSOFTOUTPUTXXX" #default file name, can override from command line with -o or --output
 }
}

physics.producers.generator.InputFileName: "XXXTEXTINPUTXXX"
services.user.LArG4Parameters.KeepEMShowerDaughters: true
services.user.LArG4Parameters.StoreTrajectories: true
